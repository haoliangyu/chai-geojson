"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}function isPoint$1(e,t){t=t||{};var o=t.coordinates?t.coordinates:e._obj.coordinates,i=t.negativeMsg?t.negativeMsg:"Expect coordinates not to be valid point coordinates",n=t.positiveMsg?t.positiveMsg:"Expect ["+o+"] to be valid point coordinates";e.assert(2===o.length&&"number"==typeof o[0]&&!Number.isNaN(o[0])&&"number"==typeof o[1]&&!Number.isNaN(o[1]),n,i)}function isLineString$1(e,t){t=t||{};var o=t.negativeMsg?t.negativeMsg:"Expect coordinates not to be valid linestring coordinates",i=t.coordinates?t.coordinates:e._obj.coordinates;e.assert(i.length>1,t.positiveMsg?t.positiveMsg:"Expect coordinates to have at least two points",o),i.forEach(function(t){isPoint$1(e,{coordinates:t,negativeMsg:o})})}function isPolygon$1(e,t){t=t||{};var o=t.negativeMsg?t.negativeMsg:"Expect coordinates not to be valid polygon coordinates",i=t.coordinates?t.coordinates:e._obj.coordinates;e.assert(i.length>0,t.positiveMsg?t.positiveMsg:"Expect coordinates to have at least one ring",o),i.forEach(function(t,i){isLineString$1(e,{coordinates:t,positiveMsg:"Expect ring "+(i+1)+" to be valid linestring coordinates",negativeMsg:o})})}function getTypeAssertFunction(e){return typeAssertFunction[e]}function isFeatureCollection(e){e.assert("FeatureCollection"===e._obj.type&&Array.isArray(e._obj.features),"expected #{this} to be a FeatureCollection","expected #{this} to not be a FeatureCollection")}function isFeature(e){e.assert("Feature"===e._obj.type&&"object"===_typeof(e._obj.geometry)&&"object"===_typeof(e._obj.properties),"expected #{this} to be a Feature","expected #{this} to not be a Feature")}function isGeometry(e){var t=e._obj.type,o=getTypeAssertFunction(t);o(e)}function isPoint$$1(e){var t="expected #{this} to be a Point",o="expected #{this} to not be a Point";e.assert("Point"===e._obj.type&&Array.isArray(e._obj.coordinates),t,o),isPoint$1(e)}function isLineString$$1(e){var t="expected #{this} to be a LineString",o="expected #{this} to not be a LineString";e.assert("LineString"===e._obj.type&&Array.isArray(e._obj.coordinates),t,o),isLineString$1(e)}function isPolygon$$1(e){var t="expected #{this} to be a Polygon",o="expected #{this} to not be a Polygon";e.assert("Polygon"===e._obj.type&&Array.isArray(e._obj.coordinates),t,o),isPolygon$1(e)}function isMultiPoint(e){var t="expected #{this} to be a MultiPoint",o="expected #{this} to not be a MultiPoint";e.assert("MultiPoint"===e._obj.type&&Array.isArray(e._obj.coordinates),t,o),e._obj.coordinates.forEach(function(t,o){isPoint$1(e,{coordinates:t,positiveMsg:"Expect point "+(o+1)+" to be valid point coordinates"})})}function isMultiLineString(e){var t="expected #{this} to be a MultiLineString",o="expected #{this} to not be a MultiLineString";e.assert("MultiLineString"===e._obj.type&&Array.isArray(e._obj.coordinates),t,o),e._obj.coordinates.forEach(function(t,o){isLineString$1(e,{coordinates:t,positiveMsg:"Expect linestring "+(o+1)+" to be valid linestring coordinates"})})}function isMultiPolygin(e){var t="expected #{this} to be a MultiPolygon",o="expected #{this} to not be a MultiPolygon";e.assert("MultiPolygon"===e._obj.type&&Array.isArray(e._obj.coordinates),t,o),e._obj.coordinates.forEach(function(t,o){isPolygon$1(e,{coordinates:t,positiveMsg:"Expect polygon "+(o+1)+" to be valid polygon coordinates"})})}function areaEquals(e,t,o){var i=area(e._obj),n=t*o;e.assert(t-n<=i&&i<=t+n,"expected area "+i+" m^2 to euqal "+t+" m^2 with "+o+" percision","expected area "+i+" m^2 not to euqal "+t+" m^2 with "+o+" percision")}function areaAbove(e,t){var o=area(e._obj);e.assert(o>t,"expected area "+o+" m^2 to be above "+t+" m^2","expected area "+o+" m^2 not to be above "+t+" m^2")}function areaBelow(e,t){var o=area(e._obj);e.assert(o<t,"expected area "+o+" m^2 to be below "+t+" m^2","expected area "+o+" m^2 not to be below "+t+" m^2")}function areaWithin(e,t,o){var i=area(e._obj);e.assert(t<=i&&i<=o,"expected area "+i+" m^2 to be within "+t+" and "+o+" m^2","expected area "+i+" m^2 not to be within "+t+" and "+o+" m^2")}var area=_interopDefault(require("@turf/area")),_turf_lineDistance=require("@turf/line-distance"),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},get=function e(t,o,i){null===t&&(t=Function.prototype);var n=Object.getOwnPropertyDescriptor(t,o);if(void 0===n){var r=Object.getPrototypeOf(t);return null===r?void 0:e(r,o,i)}if("value"in n)return n.value;var a=n.get;if(void 0!==a)return a.call(i)},set=function e(t,o,i,n){var r=Object.getOwnPropertyDescriptor(t,o);if(void 0===r){var a=Object.getPrototypeOf(t);null!==a&&e(a,o,i,n)}else if("value"in r&&r.writable)r.value=i;else{var s=r.set;void 0!==s&&s.call(n,i)}return i},typeAssertFunction={FeatureCollection:isFeatureCollection,Feature:isFeature,Geometry:isGeometry,Point:isPoint$$1,LineString:isLineString$$1,Polygon:isPolygon$$1,MultiPoint:isMultiPoint,MultiLineString:isMultiLineString,MultiPolygon:isMultiPolygin},index=function(e,t){var o=e.Assertion;o.overwriteChainableMethod("a",function(e){return function(t){var i=getTypeAssertFunction(t);i?(new o(this._obj).to.have.property("type").a("string"),i(this)):e.apply(this,arguments)}},function(e){return function(){e.apply(this,arguments)}}),o.addChainableMethod("area",function(e,t){new o(e).to.be.a("Number").at.least(0),t=t||0,new o(t).to.be.a("Number").within(0,1),areaEquals(this,e,t)},function(){this.geomArea=!0}),o.addMethod("areaOf",function(e,t){new o(e).to.be.a("Number").at.least(0),t=t||0,new o(t).to.be.a("Number").within(0,1),areaEquals(this,e,t)}),o.overwriteMethod("above",function(e){return function(t){this.geomArea||this.geomLength?(new o(t).to.be.a("Number").at.least(0),this.geomArea&&areaAbove(this,t)):e.apply(this,arguments)}}),o.overwriteMethod("below",function(e){return function(t){this.geomArea||this.geomLength?(new o(t).to.be.a("Number").at.least(0),this.geomArea&&areaBelow(this,t)):e.apply(this,arguments)}}),o.overwriteMethod("within",function(e){return function(t,i){this.geomArea||this.geomLength?(new o(t).to.be.a("Number").at.least(0),new o(i).to.be.a("Number").at.least(i),this.geomArea&&areaWithin(this,t,i)):e.apply(this,arguments)}})};module.exports=index;