"use strict";function isPoint$1(e,t){new e(t).to.have.lengthOf(2)}function isLineString$1(e,t){new e(t).to.have.length.above(1),t.forEach(function(t){new e(t).to.be.a("array"),isPoint$1(e,t)})}function isFeatureCollection(e,t){new e(t).to.have.property("type").a("string"),new e(t.type).to.equal("FeatureCollection"),new e(t).to.have.property("features").a("array")}function isFeature(e,t){new e(t).to.have.property("type").a("string"),new e(t.type).to.equal("Feature"),new e(t).to.have.property("geometry").a("object"),new e(t).to.have.property("properties").a("object")}function isGeometry(e,t){new e(t).to.have.property("type").a("string");var n=t.type,o=getTypeAssertFunction(n);o(e,t)}function isPoint$$1(e,t){new e(t).to.have.property("type").a("string"),new e(t.type).to.equal("Point"),new e(t).to.have.property("coordinates").a("array"),isPoint$1(e,t.coordinates)}function isLineString$$1(e,t){new e(t).to.have.property("type").a("string"),new e(t.type).to.equal("LineString"),new e(t).to.have.property("coordinates").a("array"),isLineString$1(e,t.coordinates)}function getTypeAssertFunction(e){return"FeatureCollection"===e?isFeatureCollection:"Feature"===e?isFeature:"Geometry"===e?isGeometry:"Point"===e?isPoint$$1:"LineString"===e?isLineString$$1:void 0}var index=function(e,t){var n=e.Assertion;n.overwriteChainableMethod("a",function(e){return function(t){var o=getTypeAssertFunction(t);o?o(n,this._obj):e.apply(this,arguments)}},function(e){return function(){e.apply(this,arguments)}})};module.exports=index;