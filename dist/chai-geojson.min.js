"use strict";function isPoint$1(t,e){new t(e).to.have.lengthOf(2)}function isLineString$1(t,e){new t(e).to.have.length.above(1),e.forEach(function(e){new t(e).to.be.a("array"),isPoint$1(t,e)})}function isPolygon$1(t,e){new t(e).to.have.length.above(0),e.forEach(function(e){new t(e).to.be.a("array"),isLineString$1(t,e)})}function getTypeAssertFunction(t){return typeAssertFunction[t]}function isFeatureCollection(t,e){new t(e).to.have.property("type").a("string"),new t(e.type).to.equal("FeatureCollection"),new t(e).to.have.property("features").a("array")}function isFeature(t,e){new t(e).to.have.property("type").a("string"),new t(e.type).to.equal("Feature"),new t(e).to.have.property("geometry").a("object"),new t(e).to.have.property("properties").a("object")}function isGeometry(t,e){new t(e).to.have.property("type").a("string");var n=e.type,o=getTypeAssertFunction(n);o(t,e)}function isPoint$$1(t,e){new t(e).to.have.property("type").a("string"),new t(e.type).to.equal("Point"),new t(e).to.have.property("coordinates").a("array"),isPoint$1(t,e.coordinates)}function isLineString$$1(t,e){new t(e).to.have.property("type").a("string"),new t(e.type).to.equal("LineString"),new t(e).to.have.property("coordinates").a("array"),isLineString$1(t,e.coordinates)}function isPolygon$$1(t,e){new t(e).to.have.property("type").a("string"),new t(e.type).to.equal("Polygon"),new t(e).to.have.property("coordinates").a("array"),isPolygon$1(t,e.coordinates)}function isMultiPoint(t,e){new t(e).to.have.property("type").a("string"),new t(e.type).to.equal("MultiPoint"),new t(e).to.have.property("coordinates").a("array"),isLineString$1(t,e.coordinates)}function isMultiLineString(t,e){new t(e).to.have.property("type").a("string"),new t(e.type).to.equal("MultiLineString"),new t(e).to.have.property("coordinates").a("array"),isPolygon$1(t,e.coordinates)}function isMultiPolygin(t,e){new t(e).to.have.property("type").a("string"),new t(e.type).to.equal("MultiPolygon"),new t(e).to.have.property("coordinates").a("array"),e.coordinates.forEach(function(e){new t(e).to.be.a("array"),isPolygon$1(t,e)})}var typeAssertFunction={FeatureCollection:isFeatureCollection,Feature:isFeature,Geometry:isGeometry,Point:isPoint$$1,LineString:isLineString$$1,Polygon:isPolygon$$1,MultiPoint:isMultiPoint,MultiLineString:isMultiLineString,MultiPolygon:isMultiPolygin},index=function(t,e){var n=t.Assertion;n.overwriteChainableMethod("a",function(t){return function(e){var o=getTypeAssertFunction(e);o?o(n,this._obj):t.apply(this,arguments)}},function(t){return function(){t.apply(this,arguments)}})};module.exports=index;